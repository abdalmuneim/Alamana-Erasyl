name: Android Release

# Controls when the workflow will run
on:
  push:
    branches:
      - main
      - forUser
  pull_request:
    types:
      - closed

  # Allows you to run this workflow manually from the Actions tab from your GitHub repo
  workflow_dispatch:

# Contains the job that does the process from build to deploy
jobs:
  build:
    # Runs on Ubuntu latest runner
    runs-on: ubuntu-latest

    # Uses steps to represent a sequence of tasks that will be executed as part of job
    steps:
      # Readies your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Sets up Java so your job can use it for the Flutter app build
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "12.x"
          cache: "gradle"

      # Sets up Flutter using the subosito Flutter workflow
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.1"
          channel: "stable"
          cache: true

      # caching build, gradle, and pub-cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            build/
            android/.gradle/
          key: ${{ runner.os }}-build_and_android-${{ hashFiles('**/*.gradle*', 'pubspec.lock') }}

      # Runs a single command using the runnerâ€™s shell
      - name: Get dependencies
        run: flutter pub get

      # analyzing the app to know that there is a build issue or not
      - name: Run analyzer
        run: flutter analyze

      # Read the updated version from version1.txt file
      - name: Read release version
        id: read-version
        uses: NiklasLehnfeld/flutter-version-number-action@main
        with:
          file-path: pubspec.yaml

      # Decodes the base64 encoded keystore value saved as a secret to ID android_keystore
      # - name: Download Android keystore
      #   id: android_keystore
      #   uses: timheuer/base64-to-file@v1.0.3
      #   with:
      #     fileName: upload-keystore.jks
      #     encodedString: ${{ secrets.KEYSTORE_BASE64 }}

      # Creates key.properties using the secrets and android_keystore
      # - name: Create key.properties
      #   run: |
      #     echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
      #     echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
      #     echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
      #     echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties

      # Starts release build APK
      - name: Start release build APK
        run: flutter build apk --release

      # Uploads the APK release as an artifact to be used in the next job
      - name: Upload APK Release
        uses: actions/upload-artifact@v2
        with:
          name: apk-release
          path: build/app/outputs/flutter-apk/app-release.apk

      # Creates apk-release in GitHub
      - name: Create apk-release in GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: apk_Release_${{ steps.read-version.outputs.version-number }}
          allowUpdates: true

      # Deploys to Google Play Store (uncomment if needed)
      # - name: Release Build to internal track
      #   uses: r0adkll/upload-google-play@v1
      #   with:
      #     serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
      #     packageName: com.app.sharrae
      #     releaseFiles: build/app/outputs/bundle/release/app-release.aab
      #     track: internal
